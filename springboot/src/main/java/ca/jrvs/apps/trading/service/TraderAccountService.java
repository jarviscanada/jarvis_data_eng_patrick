package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.SecurityOrder;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      PositionDao positionDao, SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount.
   * - Validate user input (all fields must be non empty)
   * - create a trader
   * - create an account
   * - create, setup, and return a new traderAccountView
   *
   * Assumption: to simplify the logic, each trader has only one account where traderID == accountID
   *
   * @param trader cannot be null. All fields cannot be null except for id(auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {
    validatetrader(trader);
    Account account = new Account();
    TraderAccountView traderAccountView = new TraderAccountView();
    trader.setId(traderDao.save(trader).getId());
    account.setTrader_id(trader.getId());
    account.setAmount(0d);
    account.setId(accountDao.save(account).getId());
    traderAccountView.setAccount(account);
    traderAccountView.setTrader(trader);
    return traderAccountView;
  }

  /**
   * helper function to validate a trader.
   *
   * @param trader
   * @throws IllegalArgumentException if a trader has null fields or id is not null
   */
  private void validatetrader(Trader trader){
    if(trader == null || trader.getCountry() == null || trader.getDob() == null
    || trader.getEmail() == null || trader.getFirstName() == null || trader.getLastName() == null
    || trader.getId() != null) {
      throw new IllegalArgumentException("wrong trader input");
    }
  }

  /**
   * A trader can be deleted iff it has no open position and 0 cash balance
   * - validate traderId
   * - get trader account by traderId and check account balance
   * - get positions by accountId and check postions
   * - delete all securityOrders, account, trader (in this order)
   *
   * @param traderId must not be null
   * @throws IllegalArgumentException if traderId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {
    Account account = accountDao.findByOtherId(traderId, "trader_id").get(0);
    validateAccount(account);
    List<Position> positions = positionDao.findByOtherId(account.getId(), "account_id");
    List<SecurityOrder> securityOrders = securityOrderDao.findByOtherId(account.getId(), "account_id");
    if(positions.size() != 0){
      for(Position position : positions){
        if(position.getPosition() != 0){
          throw new IllegalArgumentException("there are open position");
        }
      }
    }
    if(securityOrders.size() != 0){
      for(SecurityOrder securityOrder : securityOrders) {
        securityOrderDao.deleteById(securityOrder.getId());
      }
    }
    accountDao.deleteById(account.getId());
    traderDao.deleteById(traderId);
  }

  /**
   * helper function to validate account
   *
   * @param account
   * @throws IllegalArgumentException if the account balance not equal to 0
   */
  private void validateAccount(Account account){
    if(account.getAmount() != 0){
      throw new IllegalArgumentException("There is still remaining amount");
    }
  }
  /**
   * Deposit a fund to an account by TraderId
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmmountById
   *
   * @param traderId must not be null
   * @param fund must be greater than 0
   * @return updated account
   * @throws IllegalArgumentException if traderId is null or not found and fund is less or equal to 0
   */
  public Account deposit(Integer traderId, Double fund) {
    validateTraderIdandfund(traderId, fund);
    Account account = accountDao.findByOtherId(traderId, "trader_id").get(0);
    return accountDao.updateAmountById(account, fund);
  }

  /**
   * Withdraw a fund to an account by traderId
   *
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmmountById
   *
   * @param traderId
   * @param fund can't be 0
   * @return updated account
   * @throws IllegalArgumentException if traderId is null or not found and fund is less or equal to 0
   */
  public Account withdraw(Integer traderId, Double fund) {
    validateTraderIdandfund(traderId, fund);
    Account account = accountDao.findByOtherId(traderId, "trader_id").get(0);
    return accountDao.updateAmountById(account, -1d*fund);
  }

  /**
   * helper function to validate traderId and fund
   *
   * @param traderId
   * @param fund
   * @throws IllegalArgumentException if traderId is null or not found and fund is less or equal to 0
   */
  private void validateTraderIdandfund(Integer traderId, Double fund){
    Trader trader = traderDao.findById(traderId).get();
    if(trader == null) {
      throw new IllegalArgumentException("Trader doesn't exist");
    }
    if (fund <= 0) {
      throw new IllegalArgumentException("fund must be greater than 0");
    }
  }
}
